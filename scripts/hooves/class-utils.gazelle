(module 
 (("hooves/hooves" :all))

 (comment 
  "A simple class system based on Kevin Lindsey's code:"
  "http://www.kevlindev.com/tutorials/javascript/inheritance/")

 (define+ (extend sub-class base-class)
   (comment "extend sub-class base-class: "
			"Where both sub-class and base-class are constructors, extend"
			"contrives that sub-class will be a sub class of base-class, "
			"able to access its methods and values.")
   (var inheritance (lambda () undefined))
   (set! inheritance.prototype base-class.prototype)
   (set! sub-class.prototype (new inheritance))
   (set! sub-class.prototype.constructor sub-class)
   (set! sub-class.super-constructor base-class)
   (set! sub-class.super-class base-class.prototype))



 (define-macro+ define-class ((! (non-kw-symbol class-name)) super-class (tail constructor-lambda-forms))
   (let ((impl-name (gensym (symbol-name class-name)))
		 (cons-args (gensym "cons-args"))
		 (temp-args (gensym "temp-args"))
		 (self-holder (gensym "self"))
		 (super-class-val (gensym "super-class")))
	 `(_newline-sequence
	   (var ,impl-name (lambda ,@constructor-lambda-forms))
	   (var ,super-class-val ,super-class)
	   (define ,class-name 
		 (lambda ,@constructor-lambda-forms))
	   (.. (from "hooves/class-utils" extend) (call null ,class-name ,super-class-val)))))

 (define-macro+ define-class+ ((! (non-kw-symbol class-name)) super-class (tail constructor-lambda-forms))
   (let ((impl-name (gensym (symbol-name class-name)))
		 (cons-args (gensym "cons-args"))
		 (temp-args (gensym "temp-args"))
		 (self-holder (gensym "self"))
		 (super-class-val (gensym "super-class")))
	 `(_newline-sequence
	   (var ,impl-name (lambda ,@constructor-lambda-forms))
	   (var ,super-class-val ,super-class)
	   (define+ ,class-name 
		 (lambda ,@constructor-lambda-forms))
	   (.. (from "hooves/class-utils" extend) (call null ,class-name ,super-class-val)))))

 (define-macro+ define-method (class method-name (tail lambda-part))
   (let ((class-value (gensym "class-value"))
		 (super-method (gensym "super-method"))
		 (args (gensym "args"))
		 (explicit-this (gensym "explicit-this")))
	 `(_newline-sequence
	   (var ,class-value ,class)
	   (set! (.. ,class-value prototype ,method-name)
			 (lambda ,@lambda-part))))))


