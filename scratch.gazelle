(define-macro define-to (object-expr (tail define-args))
   (let ((object (gensym "define-to-object-")))
	 `(_let ((,object ,object-expr))
			(define ,@define-args)
			,(match define-args
					((list (non-kw-symbol id) expr)
					 `(set! (_. ,object ,id) ,id))
					((list (list (non-kw-symbol id) (tail expr)) (tail exprs))
					 `(set! (_. ,object ,id) ,id)))
			,object)))

(var o ({}))

(define-to o x 10)
(define-to o (f x) (_+ x x))


(print (o.f o.x))
